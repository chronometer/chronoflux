import streamlit as st
import requests
from PIL import Image
import io
import time
import random

def call_flux_api(api_key, prompt, negative_prompt="", width=1024, height=1024, 
                 num_images=1, guidance_scale=3.0, seed=None):
    """Official Black Forest Labs Flux API integration"""
    base_url = "https://api.us1.bfl.ai/v1"
    headers = {
        "x-key": api_key,
        "accept": "application/json",
        "Content-Type": "application/json"
    }
    payload = {
        "prompt": prompt,
        "negative_prompt": negative_prompt,
        "width": width,
        "height": height,
        "num_images": num_images,
        "guidance_scale": guidance_scale,
        "seed": seed,
        "sampler": "euler_a",
        "steps": 28
    }

    try:
        # Phase 1: Submit generation request
        st.write("Submitting image generation request...")
        response = requests.post(
            f"{base_url}/flux-pro-1.1",
            headers=headers,
            json=payload
        )
        response.raise_for_status()
        request_data = response.json()
        
        if "id" not in request_data:
            return None, "No request ID in response"
            
        request_id = request_data["id"]
        
        # Phase 2: Poll for result
        st.write("Waiting for image generation...")
        max_attempts = 60  # 30 seconds total (0.5s * 60)
        for _ in range(max_attempts):
            time.sleep(0.5)
            result = requests.get(
                f"{base_url}/get_result",
                headers=headers,
                params={"id": request_id}
            ).json()
            
            if result["status"] == "Ready":
                if num_images > 1:
                    urls = result["result"]["samples"]
                    images = []
                    for url in urls:
                        img_response = requests.get(url)
                        img_response.raise_for_status()
                        images.append(Image.open(io.BytesIO(img_response.content)))
                    return images, None
                else:
                    img_url = result["result"]["sample"]
                    img_response = requests.get(img_url)
                    img_response.raise_for_status()
                    return Image.open(io.BytesIO(img_response.content)), None
            elif result["status"] == "Failed":
                return None, f"Generation failed: {result.get('error', 'Unknown error')}"
                
            st.write(f"Status: {result['status']}")
            
        return None, "Image generation timed out"

    except requests.exceptions.HTTPError as e:
        try:
            error_detail = e.response.json()
            return None, f"API Error: {error_detail}"
        except:
            return None, f"API Error: {str(e)}"
    except Exception as e:
        return None, f"Unexpected error: {str(e)}"

# Streamlit UI
st.title("Flux Image Generator")
st.markdown("Generate amazing images with the Flux API powered by Black Forest Labs.")

api_key = st.text_input("API Key", value="7da1381b-6971-42be-9734-4ce2ff247f29", type="password")
prompt = st.text_area("Describe your image", height=100)

# Advanced Settings
with st.expander("ðŸ”§ Advanced Settings", expanded=False):
    col1, col2 = st.columns(2)
    with col1:
        negative_prompt = st.text_area(
            "Negative Prompt",
            value="low quality, blurry, text, watermark",
            help="What you DON'T want in the image (comma separated)"
        )
        num_images = st.select_slider(
            "Number of Images",
            options=[1, 2, 3, 4],
            value=1,
            help="Number of variations to generate (API credits x number of images)"
        )
    with col2:
        guidance_scale = st.slider(
            "Creativity vs Precision",
            0.0, 10.0, 3.0,
            step=0.1,
            help="Lower=More Creative, Higher=More Precise"
        )
        seed = st.number_input(
            "Random Seed",
            min_value=0,
            max_value=2**32-1,
            value=random.randint(0, 2**32-1),
            help="Set to same value for reproducible results"
        )

if st.button("Generate Image", type="primary"):
    if not prompt:
        st.error("Please enter a prompt first!")
    else:
        with st.spinner("ðŸŽ¨ Generating your masterpiece..."):
            image, error = call_flux_api(
                api_key=api_key,
                prompt=prompt,
                negative_prompt=negative_prompt,
                num_images=num_images,
                guidance_scale=guidance_scale,
                seed=seed
            )
            
            if error:
                st.error(f"Error: {error}")
            elif image:
                st.success("âœ¨ Generation Complete!")
                if isinstance(image, list):
                    cols = st.columns(num_images)
                    for idx, img in enumerate(image):
                        with cols[idx]:
                            st.image(img, use_container_width=True)
                            st.caption(f"Variation {idx+1}")
                else:
                    st.image(image, use_container_width=True)
